version: '3.7' 
services:
  app: 
    container_name: clientst
    image: clientstaging
    restart: always 
    build: .
    environment:
      - BRANCH=staging
      - ENVIRONMENT=st
      - HOST=http://localhost
      - HOST_SERVER=http://nginxst
      - PORT_SERVER=3000
    ports: 
      - '3030:3030'
    expose:
      - '3030'
    networks:
      - st-network
    links:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030"]
      interval: 30s
      timeout: 10s
      retries: 3

  webapi1: 
    container_name: serverst1
    image: serverstaging
    restart: always 
    build: .
    environment:
      - BRANCH=staging
      - ENVIRONMENT=st
    expose:
      - '3000'
    networks:
      - st-network  
    links:
      - mongost
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  webapi2: 
    container_name: serverst2
    image: serverstaging
    restart: always 
    build: .
    environment:
      - BRANCH=staging
      - ENVIRONMENT=st
    expose:
      - '3000'
    networks:
      - st-network  
    links:
      - mongost
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    
  mongost:
    container_name: mongost
    image: mongo:7.0.10-rc0-jammy
    volumes: 
      - mongodb:/data/db
    ports:
      - '27017:27017'
    expose:
      - '27017'
    networks:
      - st-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:latest
    container_name: nginxst
    ports:
      - '3000:3000'
    expose:
      - '3000'
    volumes:
      - ./nginx/nginx-st.conf:/etc/nginx/nginx.conf
    networks:
      - st-network
    links:
      - webapi1
      - webapi2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheusst
    volumes:
      - ./nginx/prometheus-st.yml:/etc/prometheus/prometheus.yml
    ports:
      - '3333:9090'
    networks:
      - st-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3330:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=edinson1
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - st-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  st-network:
    name: st-network
    driver: bridge

volumes:
  mongodb:
  grafana:
